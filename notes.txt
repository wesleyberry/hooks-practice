React hooks allow you to hook into React state and lifecycle methods from function components.
    Prior to hooks, React used class components to manage state; now we can do so in functional components

Why React hooks?
    Different way of doing the same thing; transition from classes to functions
    no more complex lifecycle methods
    better way of sharing stateful logic

Rules of React hooks
    1) Only call hooks at the top level
    2) Call hooks from React Components

Lifecycle class methods to lifecycle hooks
    Initial Render
        getDerivedStateFromProps or useEffect(() => (), [prop1, prop2]);
        componentDidMount or useEffect(() => {}, []);
    Updates
        getDerivedStateFromProps or useEffect(() => {}, [prop1, prop2]);
        shouldComponentUpdate or useMemo
        componentDidUpdate or useEffect(() => {});
        getSnapshotBeforeUpdate or custom hook to hold previous state
    Unmount
        useEffect(() => {return () => {//cleanup}}, []);
    
    Error boundary
        getDerivedStateFromError()
        componentDidCatch()

How to debug a project?
    Console.log()
    Debugger statements
    React Developer Tools (Chrome plugin)
    useDebugValue

-------------------------------------------------------------------------------

useEffect - allows you to perform side effects in functional components
    close replacement for componentDidMount, componentDidUpdate, and componentWillUnmount

-------------------------------------------------------------------------------
Order of Lifecycle methods
1) constructor
    -state is here
2) getDerivedStateFromProps
    -only happens if you are passing props around
3) Render
4) componentDidMount
5) shouldComponentUpdate
6) Render
7) getSnapshotBeforeUpdate
8) componentDidUpdate
9) componentWillUnmount 

Update methods will only be called if changes are made to the state
-------------------------------------------------------------------------------
Joshua Fluke Jr. React Dev Int Questions
1) What are some of the major advantages of React?
    * UI testing becomes faster
    * Faster performance but may be slower on start Update
    * JSX readability
    * Easy to intergrate other frameworks
    * server-side rendering (not needed though)

2) What is a React key and what is its purpose?
    * Keys are identifiers to tell what has changed 

3) What are the differences between a stateful component and a stateless component?
    Stateful:
        * Stateful components have access to state in memory
        * Can change state
        * Can pass down state as props
    Stateless:
        * No state
        * can only recieve state as a prop1

4) Can you create an event listener?