React hooks allow you to hook into React state and lifecycle methods from function components.
    Prior to hooks, React used class components to manage state; now we can do so in functional components

Why React hooks?
    Different way of doing the same thing; transition from classes to functions
    no more complex lifecycle methods
    better way of sharing stateful logic

Rules of React hooks
    1) Only call hooks at the top level
    2) Call hooks from React Components

Lifecycle class methods to lifecycle hooks
    Initial Render
        getDerivedStateFromProps or useEffect(() => (), [prop1, prop2]);
        componentDidMount or useEffect(() => {}, []);
    Updates
        getDerivedStateFromProps or useEffect(() => {}, [prop1, prop2]);
        shouldComponentUpdate or useMemo
        componentDidUpdate or useEffect(() => {});
        getSnapshotBeforeUpdate or custom hook to hold previous state
    Unmount
        useEffect(() => {return () => {//cleanup}}, []);
    
    Error boundary
        getDerivedStateFromError()
        componentDidCatch()

How to debug a project?
    Console.log()
    Debugger statements
    React Developer Tools (Chrome plugin)
    useDebugValue

-------------------------------------------------------------------------------

useEffect - allows you to perform side effects in functional components
    close replacement for componentDidMount, componentDidUpdate, and componentWillUnmount

-------------------------------------------------------------------------------
Order of Lifecycle methods
1) constructor
    - set state here
2) static getDerivedStateFromProps
    - Only happens if you are passing props around
    - Why static? Don't want user to access 'this' directly
3) render
    - returns JSX
    - cannot set state here
4) componentDidMount
    - can make API calls or network requests here
*) static getDerivedStateFromProps
5) shouldComponentUpdate
    - if false, do not render
    - if true, render
6) render
7) getSnapshotBeforeUpdate
    - can remember where mouse location might be, etc...
8) componentDidUpdate
    - can make API calls or network requests here
9) componentWillUnmount 
    - clean up; for example, a timer

Update methods will only be called if changes are made to the state
-------------------------------------------------------------------------------
Joshua Fluke Jr. React Dev Int Questions
1) What are some of the major advantages of React?
    * UI testing becomes faster
    * Faster performance but may be slower on start Update
    * JSX readability
    * Easy to intergrate other frameworks
    * server-side rendering (not needed though)

2) What is a React key and what is its purpose?
    * Keys are identifiers to tell what has changed 

3) What are the differences between a stateful component and a stateless component?
    Stateful:
        * Stateful components have access to state in memory
        * Can change state
        * Can pass down state as props
    Stateless:
        * No state
        * can only recieve state as a prop1

4) Can you create an event listener?
-------------------------------------------------------------------------------
techsith React Interview Questions
Why do we use arrow functions in react?
    Does not create 'this' for itself

How to prevent components from re-rendering?
    shouldComponentUpdate()
        return false
    React.PureComponent
    React.memo

Explain error boundaries?
    <ErrorBoundaryComp>
        <MyComp />
    </ErrorBoundaryComp>
    static getDerivedStateFromError
    componentDidCatch
    - Error boundaries are React components that catch JS errors anywhere in their child component tree, log those errors, and display a fallback UI

Best lifecycle method for making API calls?
    componentDidMount

React Patterns and explain usage?
    - context-api Patterns
        Provides a way to pass data through the component tree without having to pass props down manually at every level
    - render props
        using children as functions
    - presentation component Patterns
        written as stateless components

Why would you use react in your project?
    * fast to Update
    * JSX readability
    * could update from server
    * UI testing is faster
    * easier to implement other frameworks

What is css-in-js pattern?
    * CSS within component should only change the styling of the rendered HTML content within that component
    * Or you can export the CSS as JS objects and import it into other components

Why can't you update state directly without setState()?
    * Avoid unnecessary renders by calling setState() only when the new state differs from the previous state

How many ways can you conditionally render in react?
    * if statement
    * && (logical operators)
    * ternary expression

What are Fragments and why do we use it?
    * Container for content in virtual DOM 
    * Use it do avoid unnecessary containers in the actual DOM
        - pollutes DOM tree and could break CSS (selectors)

How do you do code-splitting in react?
    * lazy loading
    * <Suspense>
    * You may not necessarily need every page to load if the user isn't using them

How do you optimize a react app?
    * What is the problem?
    * use cleanup / componentWillUnmount
    * lazy loading
    * make sure we are returning the correct value from shouldComponentUpdate
    * check APIs
    * functional component may speed things up

What is the virtual DOM?
    * The virtual DOM is a representation of the actual DOM tree
    * Best way to update the DOM efficiently is to update as little as possible and as infrequently as possible
    * React uses a cheap way of updating the DOM

Coding Practices for React
    * Fix the problem in an application
        - are handlers bound properly to a class?
        - state may not be updating properly
        - syntax errors?
        - Carefully read the code
        - There might be multiple issues
        - Ask questions/communicate
    * Add functionality
        - Tic-Tac-Toe game? Winner?
        - Draw it out before coding?
        - Ask about requirements
    * Build from scratch
        - Build ToDo list 
        - componentize
        - use ES6 Syntax